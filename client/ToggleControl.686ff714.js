import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, K as makeStyleVars, e as element, a as space, t as text, f as claim_element, g as children, c as claim_space, j as claim_text, b as detach_dev, k as attr_dev, m as add_location, n as insert_hydration_dev, o as append_hydration_dev, M as listen_dev, a5 as set_data_dev, p as noop } from './client.1e12038a.js';

/* src/routes/compounds/mapbox/components/ToggleControl.svelte generated by Svelte v3.59.2 */
const file = "src/routes/compounds/mapbox/components/ToggleControl.svelte";

function create_fragment(ctx) {
	let div;
	let input;
	let t0;
	let label;
	let t1;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			div = element("div");
			input = element("input");
			t0 = space();
			label = element("label");
			t1 = text(/*title*/ ctx[1]);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { style: true, class: true });
			var div_nodes = children(div);
			input = claim_element(div_nodes, "INPUT", { id: true, type: true, class: true });
			t0 = claim_space(div_nodes);
			label = claim_element(div_nodes, "LABEL", { for: true, class: true });
			var label_nodes = children(label);
			t1 = claim_text(label_nodes, /*title*/ ctx[1]);
			label_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(input, "id", "toggle");
			attr_dev(input, "type", "checkbox");
			attr_dev(input, "class", "svelte-rzlqeh");
			add_location(input, file, 23, 1, 450);
			attr_dev(label, "for", "toggle");
			attr_dev(label, "class", "svelte-rzlqeh");
			add_location(label, file, 28, 1, 509);
			attr_dev(div, "style", /*style*/ ctx[2]);
			attr_dev(div, "class", "ToggleControl svelte-rzlqeh");
			add_location(div, file, 19, 0, 410);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, div, anchor);
			append_hydration_dev(div, input);
			input.checked = /*checked*/ ctx[0];
			append_hydration_dev(div, t0);
			append_hydration_dev(div, label);
			append_hydration_dev(label, t1);

			if (!mounted) {
				dispose = listen_dev(input, "change", /*input_change_handler*/ ctx[4]);
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*checked*/ 1) {
				input.checked = /*checked*/ ctx[0];
			}

			if (dirty & /*title*/ 2) set_data_dev(t1, /*title*/ ctx[1]);

			if (dirty & /*style*/ 4) {
				attr_dev(div, "style", /*style*/ ctx[2]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let style;
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('ToggleControl', slots, []);

	const defaultTheme = {
		outlineColor: 'black',
		outlineStyle: 'solid',
		outlineWidth: '1px'
	};

	let { checked = true } = $$props;
	let { title } = $$props;
	let { theme = defaultTheme } = $$props;

	$$self.$$.on_mount.push(function () {
		if (title === undefined && !('title' in $$props || $$self.$$.bound[$$self.$$.props['title']])) {
			console.warn("<ToggleControl> was created without expected prop 'title'");
		}
	});

	const writable_props = ['checked', 'title', 'theme'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ToggleControl> was created with unknown prop '${key}'`);
	});

	function input_change_handler() {
		checked = this.checked;
		$$invalidate(0, checked);
	}

	$$self.$$set = $$props => {
		if ('checked' in $$props) $$invalidate(0, checked = $$props.checked);
		if ('title' in $$props) $$invalidate(1, title = $$props.title);
		if ('theme' in $$props) $$invalidate(3, theme = $$props.theme);
	};

	$$self.$capture_state = () => ({
		makeStyleVars,
		defaultTheme,
		checked,
		title,
		theme,
		style
	});

	$$self.$inject_state = $$props => {
		if ('checked' in $$props) $$invalidate(0, checked = $$props.checked);
		if ('title' in $$props) $$invalidate(1, title = $$props.title);
		if ('theme' in $$props) $$invalidate(3, theme = $$props.theme);
		if ('style' in $$props) $$invalidate(2, style = $$props.style);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*checked*/ 1) {
			$$invalidate(0, checked = checked || false);
		}

		if ($$self.$$.dirty & /*title*/ 2) {
			$$invalidate(1, title = title || 'Toggle');
		}

		if ($$self.$$.dirty & /*theme*/ 8) {
			$$invalidate(3, theme = theme ? { ...defaultTheme, ...theme } : defaultTheme);
		}

		if ($$self.$$.dirty & /*theme*/ 8) {
			$$invalidate(2, style = makeStyleVars(theme));
		}
	};

	return [checked, title, style, theme, input_change_handler];
}

class ToggleControl extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { checked: 0, title: 1, theme: 3 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "ToggleControl",
			options,
			id: create_fragment.name
		});
	}

	get checked() {
		throw new Error("<ToggleControl>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set checked(value) {
		throw new Error("<ToggleControl>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get title() {
		throw new Error("<ToggleControl>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title(value) {
		throw new Error("<ToggleControl>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get theme() {
		throw new Error("<ToggleControl>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set theme(value) {
		throw new Error("<ToggleControl>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { ToggleControl as default };
