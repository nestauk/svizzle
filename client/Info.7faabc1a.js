import { k as pipe, ah as skipIf, ai as isNil, e as pairs$1, u as mapWith } from './defaultLocale.3cc8e503.js';
import { j as joinWithColon, d as joinWithSemicolon } from './ScreenGauge.12bb7888.js';
import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, F as svg_element, f as claim_element, g as children, b as detach_dev, j as attr_dev, k as add_location, l as insert_dev, n as noop } from './client.0cc30d5f.js';

/**
* @module @svizzle/utils/string-[string-string]
*/

/**
 * Return a function that prepends the provided string to the input string
 *
 * @function
 * @arg {string} prefix - The string to be prepended
 * @return {function} - String -> String
 *
 * @example
> prefixed = makePrefixed('---')
> prefixed('A')
'---A'
> prefixed('B')
'---B'
 *
 * @since 0.1.0
 * @see {@link module:@svizzle/utils/string-[string-string].makePostfixed|makePostfixed}
 */
const makePrefixed = prefix => string => prefix + string;

function pairs(values, pairof = pair) {
  const pairs = [];
  let previous;
  let first = false;
  for (const value of values) {
    if (first) pairs.push(pairof(previous, value));
    previous = value;
    first = true;
  }
  return pairs;
}

function pair(a, b) {
  return [a, b];
}

/**
* @module @svizzle/dom/attrs
*/

/**
 * Return a style string from an object
 *
 * @function
 * @arg {object} object
 * @return {string} styleString
 *
 * @example
> makeStyle({color: 'red', 'font-size': '10px'})
'color:red;font-size:10px'
 *
 * @since 0.1.0
 */
const makeStyle = pipe([
	skipIf(isNil),
	pairs$1,
	mapWith(joinWithColon),
	joinWithSemicolon
]);

/**
 * Return a style string with hyphenate CSS variables derived from the keys of the expected object
 *
 * @function
 * @arg {object} object
 * @return {string} styleString
 *
 * @example
> makeStyleVars({foo: 'red', 'bar': '10px'})
'--foo:red;--bar:10px'
 *
 * @since 0.4.0
 */
const makeStyleVars = pipe([
	skipIf(isNil),
	pairs$1,
	mapWith(pipe([joinWithColon, makePrefixed('--')])),
	joinWithSemicolon
]);

/**
 * Return a px representation of the received number.
 * Throws an error if the input is not a number.
 *
 * @function
 * @arg {number} number
 * @return {string}
 *
 * @example
> toPx(10)
'10px'
 *
 * @since 0.1.0
 */
const toPx = number => `${number}px`;

/* ../../components/ui/src/icons/feather/Info.svelte generated by Svelte v3.38.3 */

const file = "../../components/ui/src/icons/feather/Info.svelte";

function create_fragment(ctx) {
	let circle;
	let line0;
	let line1;

	const block = {
		c: function create() {
			circle = svg_element("circle");
			line0 = svg_element("line");
			line1 = svg_element("line");
			this.h();
		},
		l: function claim(nodes) {
			circle = claim_element(nodes, "circle", { cx: true, cy: true, r: true }, 1);
			children(circle).forEach(detach_dev);
			line0 = claim_element(nodes, "line", { x1: true, y1: true, x2: true, y2: true }, 1);
			children(line0).forEach(detach_dev);
			line1 = claim_element(nodes, "line", { x1: true, y1: true, x2: true, y2: true }, 1);
			children(line1).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(circle, "cx", "12");
			attr_dev(circle, "cy", "12");
			attr_dev(circle, "r", "10");
			add_location(circle, file, 1, 0, 34);
			attr_dev(line0, "x1", "12");
			attr_dev(line0, "y1", "16");
			attr_dev(line0, "x2", "12");
			attr_dev(line0, "y2", "12");
			add_location(line0, file, 1, 40, 74);
			attr_dev(line1, "x1", "12");
			attr_dev(line1, "y1", "8");
			attr_dev(line1, "x2", "12.01");
			attr_dev(line1, "y2", "8");
			add_location(line1, file, 1, 85, 119);
		},
		m: function mount(target, anchor) {
			insert_dev(target, circle, anchor);
			insert_dev(target, line0, anchor);
			insert_dev(target, line1, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(circle);
			if (detaching) detach_dev(line0);
			if (detaching) detach_dev(line1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Info", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Info> was created with unknown prop '${key}'`);
	});

	return [];
}

class Info extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Info",
			options,
			id: create_fragment.name
		});
	}
}

export { Info as I, makeStyle as a, makeStyleVars as m, pairs as p, toPx as t };
