import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, I as svg_element, J as claim_svg_element, g as children, b as detach_dev, k as attr_dev, m as add_location, n as insert_hydration_dev, p as noop, r as create_slot, K as makeStyleVars, L as Icon, e as element, a as space, f as claim_element, c as claim_space, H as toggle_class, o as append_hydration_dev, M as listen_dev, y as update_slot_base, z as get_all_dirty_from_scope, A as get_slot_changes, u as transition_in, w as group_outros, B as transition_out, x as check_outros, D as create_component, E as claim_component, F as mount_component, G as destroy_component } from './client.1e12038a.js';

/* ../../components/ui/src/icons/feather/ExternalLink.svelte generated by Svelte v3.59.2 */

const file$1 = "../../components/ui/src/icons/feather/ExternalLink.svelte";

function create_fragment$1(ctx) {
	let path;
	let polyline;
	let line;

	const block = {
		c: function create() {
			path = svg_element("path");
			polyline = svg_element("polyline");
			line = svg_element("line");
			this.h();
		},
		l: function claim(nodes) {
			path = claim_svg_element(nodes, "path", { d: true });
			children(path).forEach(detach_dev);
			polyline = claim_svg_element(nodes, "polyline", { points: true });
			children(polyline).forEach(detach_dev);
			line = claim_svg_element(nodes, "line", { x1: true, y1: true, x2: true, y2: true });
			children(line).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(path, "d", "M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6");
			add_location(path, file$1, 1, 0, 34);
			attr_dev(polyline, "points", "15 3 21 3 21 9");
			add_location(polyline, file$1, 1, 74, 108);
			attr_dev(line, "x1", "10");
			attr_dev(line, "y1", "14");
			attr_dev(line, "x2", "21");
			attr_dev(line, "y2", "3");
			add_location(line, file$1, 1, 119, 153);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, path, anchor);
			insert_hydration_dev(target, polyline, anchor);
			insert_hydration_dev(target, line, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(path);
			if (detaching) detach_dev(polyline);
			if (detaching) detach_dev(line);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('ExternalLink', slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ExternalLink> was created with unknown prop '${key}'`);
	});

	return [];
}

class ExternalLink extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "ExternalLink",
			options,
			id: create_fragment$1.name
		});
	}
}

var ExternalLink$1 = ExternalLink;

const defaultRel = 'noopener';

/* ../../components/ui/src/Link.svelte generated by Svelte v3.59.2 */
const file = "../../components/ui/src/Link.svelte";

// (71:1) {#if isExternal && showIcon}
function create_if_block(ctx) {
	let span;
	let icon;
	let current;

	icon = new Icon({
			props: {
				glyph: ExternalLink$1,
				size: /*iconSize*/ ctx[3],
				stroke: /*theme*/ ctx[9].iconStroke,
				strokeWidth: /*theme*/ ctx[9].iconStrokeWidth
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			span = element("span");
			create_component(icon.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			claim_component(icon.$$.fragment, span_nodes);
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "class", "svelte-ctwwqp");
			add_location(span, file, 71, 2, 1727);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, span, anchor);
			mount_component(icon, span, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const icon_changes = {};
			if (dirty & /*iconSize*/ 8) icon_changes.size = /*iconSize*/ ctx[3];
			if (dirty & /*theme*/ 512) icon_changes.stroke = /*theme*/ ctx[9].iconStroke;
			if (dirty & /*theme*/ 512) icon_changes.strokeWidth = /*theme*/ ctx[9].iconStrokeWidth;
			icon.$set(icon_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
			destroy_component(icon);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(71:1) {#if isExternal && showIcon}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let a;
	let span;
	let t;
	let a_download_value;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[17].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[16], null);
	let if_block = /*isExternal*/ ctx[14] && /*showIcon*/ ctx[7] && create_if_block(ctx);

	const block = {
		c: function create() {
			a = element("a");
			span = element("span");
			if (default_slot) default_slot.c();
			t = space();
			if (if_block) if_block.c();
			this.h();
		},
		l: function claim(nodes) {
			a = claim_element(nodes, "A", {
				"aria-describedby": true,
				"aria-label": true,
				download: true,
				href: true,
				hreflang: true,
				rel: true,
				style: true,
				target: true,
				type: true,
				class: true
			});

			var a_nodes = children(a);
			span = claim_element(a_nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			if (default_slot) default_slot.l(span_nodes);
			span_nodes.forEach(detach_dev);
			t = claim_space(a_nodes);
			if (if_block) if_block.l(a_nodes);
			a_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "class", "svelte-ctwwqp");
			toggle_class(span, "bold", /*isBold*/ ctx[4]);
			add_location(span, file, 67, 1, 1649);
			attr_dev(a, "aria-describedby", /*ariaDescribedBy*/ ctx[11]);
			attr_dev(a, "aria-label", /*ariaLabel*/ ctx[12]);
			attr_dev(a, "download", a_download_value = /*download*/ ctx[0] ? '' : null);
			attr_dev(a, "href", /*href*/ ctx[1]);
			attr_dev(a, "hreflang", /*hreflang*/ ctx[2]);
			attr_dev(a, "rel", /*rel*/ ctx[6]);
			attr_dev(a, "style", /*style*/ ctx[13]);
			attr_dev(a, "target", /*target*/ ctx[8]);
			attr_dev(a, "type", /*type*/ ctx[10]);
			attr_dev(a, "class", "svelte-ctwwqp");
			toggle_class(a, "underlined", /*isUnderlined*/ ctx[5]);
			add_location(a, file, 54, 0, 1428);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, a, anchor);
			append_hydration_dev(a, span);

			if (default_slot) {
				default_slot.m(span, null);
			}

			append_hydration_dev(a, t);
			if (if_block) if_block.m(a, null);
			current = true;

			if (!mounted) {
				dispose = listen_dev(a, "keydown", /*disableSpaceToScroll*/ ctx[15], false, false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 65536)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[16],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[16])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[16], dirty, null),
						null
					);
				}
			}

			if (!current || dirty & /*isBold*/ 16) {
				toggle_class(span, "bold", /*isBold*/ ctx[4]);
			}

			if (/*isExternal*/ ctx[14] && /*showIcon*/ ctx[7]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*isExternal, showIcon*/ 16512) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(a, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (!current || dirty & /*ariaDescribedBy*/ 2048) {
				attr_dev(a, "aria-describedby", /*ariaDescribedBy*/ ctx[11]);
			}

			if (!current || dirty & /*ariaLabel*/ 4096) {
				attr_dev(a, "aria-label", /*ariaLabel*/ ctx[12]);
			}

			if (!current || dirty & /*download*/ 1 && a_download_value !== (a_download_value = /*download*/ ctx[0] ? '' : null)) {
				attr_dev(a, "download", a_download_value);
			}

			if (!current || dirty & /*href*/ 2) {
				attr_dev(a, "href", /*href*/ ctx[1]);
			}

			if (!current || dirty & /*hreflang*/ 4) {
				attr_dev(a, "hreflang", /*hreflang*/ ctx[2]);
			}

			if (!current || dirty & /*rel*/ 64) {
				attr_dev(a, "rel", /*rel*/ ctx[6]);
			}

			if (!current || dirty & /*style*/ 8192) {
				attr_dev(a, "style", /*style*/ ctx[13]);
			}

			if (!current || dirty & /*target*/ 256) {
				attr_dev(a, "target", /*target*/ ctx[8]);
			}

			if (!current || dirty & /*type*/ 1024) {
				attr_dev(a, "type", /*type*/ ctx[10]);
			}

			if (!current || dirty & /*isUnderlined*/ 32) {
				toggle_class(a, "underlined", /*isUnderlined*/ ctx[5]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(a);
			if (default_slot) default_slot.d(detaching);
			if (if_block) if_block.d();
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

const defaultIconSize = 14;

function instance($$self, $$props, $$invalidate) {
	let isExternal;
	let style;
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Link', slots, ['default']);
	const { defaultStrokeWidth } = Icon;

	const defaultTheme = {
		color: 'inherit',
		iconStroke: 'rgb(16, 174, 249)',
		iconStrokeWidth: defaultStrokeWidth,
		outlineColor: 'black',
		outlineStyle: 'solid',
		outlineWidth: '1px'
	};

	let { ariaDescribedBy = null } = $$props;
	let { ariaLabel = null } = $$props;
	let { download = null } = $$props;
	let { href = null } = $$props;
	let { hreflang = null } = $$props;
	let { iconSize = defaultIconSize } = $$props;
	let { isBold = false } = $$props;
	let { isUnderlined = false } = $$props;
	let { rel = defaultRel } = $$props;
	let { showIcon = true } = $$props;
	let { target = null } = $$props;
	let { theme = null } = $$props;
	let { type = null } = $$props;

	const disableSpaceToScroll = e => {
		if (e.keyCode === 32) {
			e.preventDefault();
		}
	};

	const writable_props = [
		'ariaDescribedBy',
		'ariaLabel',
		'download',
		'href',
		'hreflang',
		'iconSize',
		'isBold',
		'isUnderlined',
		'rel',
		'showIcon',
		'target',
		'theme',
		'type'
	];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Link> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('ariaDescribedBy' in $$props) $$invalidate(11, ariaDescribedBy = $$props.ariaDescribedBy);
		if ('ariaLabel' in $$props) $$invalidate(12, ariaLabel = $$props.ariaLabel);
		if ('download' in $$props) $$invalidate(0, download = $$props.download);
		if ('href' in $$props) $$invalidate(1, href = $$props.href);
		if ('hreflang' in $$props) $$invalidate(2, hreflang = $$props.hreflang);
		if ('iconSize' in $$props) $$invalidate(3, iconSize = $$props.iconSize);
		if ('isBold' in $$props) $$invalidate(4, isBold = $$props.isBold);
		if ('isUnderlined' in $$props) $$invalidate(5, isUnderlined = $$props.isUnderlined);
		if ('rel' in $$props) $$invalidate(6, rel = $$props.rel);
		if ('showIcon' in $$props) $$invalidate(7, showIcon = $$props.showIcon);
		if ('target' in $$props) $$invalidate(8, target = $$props.target);
		if ('theme' in $$props) $$invalidate(9, theme = $$props.theme);
		if ('type' in $$props) $$invalidate(10, type = $$props.type);
		if ('$$scope' in $$props) $$invalidate(16, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({
		makeStyleVars,
		ExternalLink: ExternalLink$1,
		Icon,
		defaultRel,
		defaultIconSize,
		defaultStrokeWidth,
		defaultTheme,
		ariaDescribedBy,
		ariaLabel,
		download,
		href,
		hreflang,
		iconSize,
		isBold,
		isUnderlined,
		rel,
		showIcon,
		target,
		theme,
		type,
		disableSpaceToScroll,
		style,
		isExternal
	});

	$$self.$inject_state = $$props => {
		if ('ariaDescribedBy' in $$props) $$invalidate(11, ariaDescribedBy = $$props.ariaDescribedBy);
		if ('ariaLabel' in $$props) $$invalidate(12, ariaLabel = $$props.ariaLabel);
		if ('download' in $$props) $$invalidate(0, download = $$props.download);
		if ('href' in $$props) $$invalidate(1, href = $$props.href);
		if ('hreflang' in $$props) $$invalidate(2, hreflang = $$props.hreflang);
		if ('iconSize' in $$props) $$invalidate(3, iconSize = $$props.iconSize);
		if ('isBold' in $$props) $$invalidate(4, isBold = $$props.isBold);
		if ('isUnderlined' in $$props) $$invalidate(5, isUnderlined = $$props.isUnderlined);
		if ('rel' in $$props) $$invalidate(6, rel = $$props.rel);
		if ('showIcon' in $$props) $$invalidate(7, showIcon = $$props.showIcon);
		if ('target' in $$props) $$invalidate(8, target = $$props.target);
		if ('theme' in $$props) $$invalidate(9, theme = $$props.theme);
		if ('type' in $$props) $$invalidate(10, type = $$props.type);
		if ('style' in $$props) $$invalidate(13, style = $$props.style);
		if ('isExternal' in $$props) $$invalidate(14, isExternal = $$props.isExternal);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*download*/ 1) {
			// FIXME https://github.com/sveltejs/svelte/issues/4442
			$$invalidate(0, download = download || null);
		}

		if ($$self.$$.dirty & /*href*/ 2) {
			$$invalidate(1, href = href || null);
		}

		if ($$self.$$.dirty & /*hreflang*/ 4) {
			$$invalidate(2, hreflang = hreflang || null);
		}

		if ($$self.$$.dirty & /*iconSize*/ 8) {
			$$invalidate(3, iconSize = iconSize || defaultIconSize);
		}

		if ($$self.$$.dirty & /*isBold*/ 16) {
			$$invalidate(4, isBold = isBold || false);
		}

		if ($$self.$$.dirty & /*isUnderlined*/ 32) {
			$$invalidate(5, isUnderlined = isUnderlined || false);
		}

		if ($$self.$$.dirty & /*rel*/ 64) {
			$$invalidate(6, rel = rel || defaultRel);
		}

		if ($$self.$$.dirty & /*showIcon*/ 128) {
			$$invalidate(7, showIcon = showIcon || true);
		}

		if ($$self.$$.dirty & /*target*/ 256) {
			$$invalidate(8, target = target || null);
		}

		if ($$self.$$.dirty & /*type*/ 1024) {
			$$invalidate(10, type = type || null);
		}

		if ($$self.$$.dirty & /*type*/ 1024) {
			$$invalidate(14, isExternal = type === 'external');
		}

		if ($$self.$$.dirty & /*theme*/ 512) {
			$$invalidate(9, theme = theme ? { ...defaultTheme, ...theme } : defaultTheme);
		}

		if ($$self.$$.dirty & /*theme*/ 512) {
			$$invalidate(13, style = makeStyleVars(theme));
		}
	};

	return [
		download,
		href,
		hreflang,
		iconSize,
		isBold,
		isUnderlined,
		rel,
		showIcon,
		target,
		theme,
		type,
		ariaDescribedBy,
		ariaLabel,
		style,
		isExternal,
		disableSpaceToScroll,
		$$scope,
		slots
	];
}

class Link extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance, create_fragment, safe_not_equal, {
			ariaDescribedBy: 11,
			ariaLabel: 12,
			download: 0,
			href: 1,
			hreflang: 2,
			iconSize: 3,
			isBold: 4,
			isUnderlined: 5,
			rel: 6,
			showIcon: 7,
			target: 8,
			theme: 9,
			type: 10
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Link",
			options,
			id: create_fragment.name
		});
	}

	get ariaDescribedBy() {
		throw new Error("<Link>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set ariaDescribedBy(value) {
		throw new Error("<Link>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get ariaLabel() {
		throw new Error("<Link>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set ariaLabel(value) {
		throw new Error("<Link>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get download() {
		throw new Error("<Link>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set download(value) {
		throw new Error("<Link>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get href() {
		throw new Error("<Link>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set href(value) {
		throw new Error("<Link>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get hreflang() {
		throw new Error("<Link>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set hreflang(value) {
		throw new Error("<Link>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get iconSize() {
		throw new Error("<Link>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set iconSize(value) {
		throw new Error("<Link>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isBold() {
		throw new Error("<Link>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isBold(value) {
		throw new Error("<Link>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isUnderlined() {
		throw new Error("<Link>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isUnderlined(value) {
		throw new Error("<Link>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get rel() {
		throw new Error("<Link>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set rel(value) {
		throw new Error("<Link>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get showIcon() {
		throw new Error("<Link>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set showIcon(value) {
		throw new Error("<Link>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get target() {
		throw new Error("<Link>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set target(value) {
		throw new Error("<Link>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get theme() {
		throw new Error("<Link>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set theme(value) {
		throw new Error("<Link>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get type() {
		throw new Error("<Link>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set type(value) {
		throw new Error("<Link>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

var Link$1 = Link;

export { ExternalLink$1 as E, Link$1 as L, defaultRel as d };
