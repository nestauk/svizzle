import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, e as element, D as create_component, f as claim_element, g as children, E as claim_component, b as detach_dev, k as attr_dev, m as add_location, n as insert_hydration_dev, F as mount_component, u as transition_in, B as transition_out, G as destroy_component, t as text, j as claim_text, o as append_hydration_dev, M as listen_dev, p as noop } from './client.7dada05b.js';
import { C as CustomControl } from './CustomControl.be000549.js';
import { M as Mapbox } from './Mapbox.38cf7ffe.js';

/* src/routes/compounds/mapbox/custom_controls.svelte generated by Svelte v3.59.2 */
const file = "src/routes/compounds/mapbox/custom_controls.svelte";

// (21:2) <CustomControl position='top-left'>
function create_default_slot_1(ctx) {
	let button;
	let t;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			button = element("button");
			t = text("Zoom to England");
			this.h();
		},
		l: function claim(nodes) {
			button = claim_element(nodes, "BUTTON", { class: true });
			var button_nodes = children(button);
			t = claim_text(button_nodes, "Zoom to England");
			button_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(button, "class", "svelte-6jdc4d");
			add_location(button, file, 21, 3, 533);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, button, anchor);
			append_hydration_dev(button, t);

			if (!mounted) {
				dispose = listen_dev(button, "click", /*zoomToEngland*/ ctx[1], false, false, false, false);
				mounted = true;
			}
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(21:2) <CustomControl position='top-left'>",
		ctx
	});

	return block;
}

// (14:1) <Mapbox   {accessToken}   {bounds}   {style}   withScaleControl={true}   withZoomControl={true}  >
function create_default_slot(ctx) {
	let customcontrol;
	let current;

	customcontrol = new CustomControl({
			props: {
				position: "top-left",
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(customcontrol.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(customcontrol.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(customcontrol, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const customcontrol_changes = {};

			if (dirty & /*$$scope*/ 4) {
				customcontrol_changes.$$scope = { dirty, ctx };
			}

			customcontrol.$set(customcontrol_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(customcontrol.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(customcontrol.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(customcontrol, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(14:1) <Mapbox   {accessToken}   {bounds}   {style}   withScaleControl={true}   withZoomControl={true}  >",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div;
	let mapbox;
	let current;

	mapbox = new Mapbox({
			props: {
				accessToken,
				bounds: /*bounds*/ ctx[0],
				style,
				withScaleControl: true,
				withZoomControl: true,
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			create_component(mapbox.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			claim_component(mapbox.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "map-container svelte-6jdc4d");
			add_location(div, file, 12, 0, 364);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, div, anchor);
			mount_component(mapbox, div, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const mapbox_changes = {};
			if (dirty & /*bounds*/ 1) mapbox_changes.bounds = /*bounds*/ ctx[0];

			if (dirty & /*$$scope*/ 4) {
				mapbox_changes.$$scope = { dirty, ctx };
			}

			mapbox.$set(mapbox_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(mapbox.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(mapbox.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(mapbox);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

const accessToken = 'pk.eyJ1IjoibmVzdGEtdWsiLCJhIjoiY2ozbjUzY2drMDAwNzJxbnl6a21uM253cSJ9.3RTMySEVk0LC4gQvGoG-Zw';
const style = 'mapbox://styles/nesta-uk/cl8olrzo200ci16pim0h4c1pn';

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Custom_controls', slots, []);
	let bounds;

	const zoomToEngland = () => {
		$$invalidate(0, bounds = [[-8.61752, 49.90774], [1.76229, 60.84585]]);
	};

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Custom_controls> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({
		CustomControl,
		Mapbox,
		accessToken,
		style,
		bounds,
		zoomToEngland
	});

	$$self.$inject_state = $$props => {
		if ('bounds' in $$props) $$invalidate(0, bounds = $$props.bounds);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [bounds, zoomToEngland];
}

class Custom_controls extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Custom_controls",
			options,
			id: create_fragment.name
		});
	}
}

export { Custom_controls as default };
