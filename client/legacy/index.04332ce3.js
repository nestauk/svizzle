import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, q as validate_each_argument, v as validate_slots, a as space, e as element, t as text, h as head_selector, b as detach_dev, c as claim_space, f as claim_element, g as children, j as claim_text, m as add_location, k as attr_dev, n as insert_hydration_dev, o as append_hydration_dev, p as noop, C as destroy_each, ah as set_data_dev } from './client.c3033a77.js';

/* src/routes/components/index.svelte generated by Svelte v3.59.2 */
const file = "src/routes/components/index.svelte";
function get_each_context(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[1] = list[i];
  return child_ctx;
}

// (23:1) {#each components as component}
function create_each_block(ctx) {
  let li;
  let a;
  let t0_value = /*component*/ctx[1].name + "";
  let t0;
  let a_href_value;
  let t1;
  const block = {
    c: function create() {
      li = element("li");
      a = element("a");
      t0 = text(t0_value);
      t1 = space();
      this.h();
    },
    l: function claim(nodes) {
      li = claim_element(nodes, "LI", {});
      var li_nodes = children(li);
      a = claim_element(li_nodes, "A", {
        href: true,
        rel: true
      });
      var a_nodes = children(a);
      t0 = claim_text(a_nodes, t0_value);
      a_nodes.forEach(detach_dev);
      t1 = claim_space(li_nodes);
      li_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(a, "href", a_href_value = "components/" + /*component*/ctx[1].slug);
      attr_dev(a, "rel", "prefetch");
      add_location(a, file, 24, 3, 423);
      add_location(li, file, 23, 2, 415);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, li, anchor);
      append_hydration_dev(li, a);
      append_hydration_dev(a, t0);
      append_hydration_dev(li, t1);
    },
    p: function update(ctx, dirty) {
      if (dirty & /*components*/1 && t0_value !== (t0_value = /*component*/ctx[1].name + "")) set_data_dev(t0, t0_value);
      if (dirty & /*components*/1 && a_href_value !== (a_href_value = "components/" + /*component*/ctx[1].slug)) {
        attr_dev(a, "href", a_href_value);
      }
    },
    d: function destroy(detaching) {
      if (detaching) detach_dev(li);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_each_block.name,
    type: "each",
    source: "(23:1) {#each components as component}",
    ctx
  });
  return block;
}
function create_fragment(ctx) {
  let t0;
  let h1;
  let t1;
  let t2;
  let ul;
  let each_value = /*components*/ctx[0];
  validate_each_argument(each_value);
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
  }
  const block = {
    c: function create() {
      t0 = space();
      h1 = element("h1");
      t1 = text("Components");
      t2 = space();
      ul = element("ul");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      this.h();
    },
    l: function claim(nodes) {
      const head_nodes = head_selector('svelte-1n0ejc1', document.head);
      head_nodes.forEach(detach_dev);
      t0 = claim_space(nodes);
      h1 = claim_element(nodes, "H1", {});
      var h1_nodes = children(h1);
      t1 = claim_text(h1_nodes, "Components");
      h1_nodes.forEach(detach_dev);
      t2 = claim_space(nodes);
      ul = claim_element(nodes, "UL", {
        class: true
      });
      var ul_nodes = children(ul);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].l(ul_nodes);
      }
      ul_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      document.title = "Svizzle Components";
      add_location(h1, file, 19, 0, 354);
      attr_dev(ul, "class", "svelte-1rd5d3v");
      add_location(ul, file, 21, 0, 375);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, t0, anchor);
      insert_hydration_dev(target, h1, anchor);
      append_hydration_dev(h1, t1);
      insert_hydration_dev(target, t2, anchor);
      insert_hydration_dev(target, ul, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(ul, null);
        }
      }
    },
    p: function update(ctx, _ref) {
      let [dirty] = _ref;
      if (dirty & /*components*/1) {
        each_value = /*components*/ctx[0];
        validate_each_argument(each_value);
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context(ctx, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(ul, null);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value.length;
      }
    },
    i: noop,
    o: noop,
    d: function destroy(detaching) {
      if (detaching) detach_dev(t0);
      if (detaching) detach_dev(h1);
      if (detaching) detach_dev(t2);
      if (detaching) detach_dev(ul);
      destroy_each(each_blocks, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function preload(_ref2) {
  return this.fetch('components.json').then(r => r.json()).then(components => {
    return {
      components
    };
  });
}
function instance($$self, $$props, $$invalidate) {
  let {
    $$slots: slots = {},
    $$scope
  } = $$props;
  validate_slots('Components', slots, []);
  let {
    components
  } = $$props;
  $$self.$$.on_mount.push(function () {
    if (components === undefined && !('components' in $$props || $$self.$$.bound[$$self.$$.props['components']])) {
      console.warn("<Components> was created without expected prop 'components'");
    }
  });
  const writable_props = ['components'];
  Object.keys($$props).forEach(key => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Components> was created with unknown prop '${key}'`);
  });
  $$self.$$set = $$props => {
    if ('components' in $$props) $$invalidate(0, components = $$props.components);
  };
  $$self.$capture_state = () => ({
    preload,
    components
  });
  $$self.$inject_state = $$props => {
    if ('components' in $$props) $$invalidate(0, components = $$props.components);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  return [components];
}
class Components extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance, create_fragment, safe_not_equal, {
      components: 0
    });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Components",
      options,
      id: create_fragment.name
    });
  }
  get components() {
    throw new Error("<Components>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set components(value) {
    throw new Error("<Components>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
}

export { Components as default, preload };
