import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, bb as getContext, am as validate_store, aw as component_subscribe, I as svg_element, a as space, t as text, J as claim_svg_element, g as children, b as detach_dev, c as claim_space, j as claim_text, k as attr_dev, m as add_location, n as insert_hydration_dev, o as append_hydration_dev, p as noop } from './client.9324a931.js';

/* src/routes/compounds/mapbox/components/Layer2.svelte generated by Svelte v3.59.2 */
const file = "src/routes/compounds/mapbox/components/Layer2.svelte";
function create_fragment(ctx) {
  let circle;
  let circle_r_value;
  let t0;
  let text_1;
  let t1;
  const block = {
    c: function create() {
      circle = svg_element("circle");
      t0 = space();
      text_1 = svg_element("text");
      t1 = text("Layer 2");
      this.h();
    },
    l: function claim(nodes) {
      circle = claim_svg_element(nodes, "circle", {
        cx: true,
        cy: true,
        r: true,
        stroke: true,
        fill: true
      });
      children(circle).forEach(detach_dev);
      t0 = claim_space(nodes);
      text_1 = claim_svg_element(nodes, "text", {
        x: true,
        y: true,
        "text-anchor": true,
        "dominant-baseline": true
      });
      var text_1_nodes = children(text_1);
      t1 = claim_text(text_1_nodes, "Layer 2");
      text_1_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(circle, "cx", /*cx*/ctx[3]);
      attr_dev(circle, "cy", /*cy*/ctx[2]);
      attr_dev(circle, "r", circle_r_value = /*abs*/ctx[6]( /*xp2*/ctx[1] - /*xp1*/ctx[0]) / 2);
      attr_dev(circle, "stroke", "red");
      attr_dev(circle, "fill", "#00F4");
      add_location(circle, file, 24, 0, 623);
      attr_dev(text_1, "x", /*cx*/ctx[3]);
      attr_dev(text_1, "y", /*cy*/ctx[2]);
      attr_dev(text_1, "text-anchor", "middle");
      attr_dev(text_1, "dominant-baseline", "middle");
      add_location(text_1, file, 32, 0, 697);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, circle, anchor);
      insert_hydration_dev(target, t0, anchor);
      insert_hydration_dev(target, text_1, anchor);
      append_hydration_dev(text_1, t1);
    },
    p: function update(ctx, _ref) {
      let [dirty] = _ref;
      if (dirty & /*cx*/8) {
        attr_dev(circle, "cx", /*cx*/ctx[3]);
      }
      if (dirty & /*cy*/4) {
        attr_dev(circle, "cy", /*cy*/ctx[2]);
      }
      if (dirty & /*xp2, xp1*/3 && circle_r_value !== (circle_r_value = /*abs*/ctx[6]( /*xp2*/ctx[1] - /*xp1*/ctx[0]) / 2)) {
        attr_dev(circle, "r", circle_r_value);
      }
      if (dirty & /*cx*/8) {
        attr_dev(text_1, "x", /*cx*/ctx[3]);
      }
      if (dirty & /*cy*/4) {
        attr_dev(text_1, "y", /*cy*/ctx[2]);
      }
    },
    i: noop,
    o: noop,
    d: function destroy(detaching) {
      if (detaching) detach_dev(circle);
      if (detaching) detach_dev(t0);
      if (detaching) detach_dev(text_1);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance($$self, $$props, $$invalidate) {
  let x1;
  let y1;
  let x2;
  let y2;
  let x;
  let y;
  let width;
  let height;
  let cx;
  let cy;
  let $_projectFn;
  let $_bbox;
  let {
    $$slots: slots = {},
    $$scope
  } = $$props;
  validate_slots('Layer2', slots, []);
  let {
    wsen
  } = $$props;
  const {
    _bbox,
    _projectFn
  } = getContext('mapBox');
  validate_store(_bbox, '_bbox');
  component_subscribe($$self, _bbox, value => $$invalidate(19, $_bbox = value));
  validate_store(_projectFn, '_projectFn');
  component_subscribe($$self, _projectFn, value => $$invalidate(18, $_projectFn = value));
  const {
    abs,
    min
  } = Math;
  let xp1, xp2, yp1, yp2;
  $$self.$$.on_mount.push(function () {
    if (wsen === undefined && !('wsen' in $$props || $$self.$$.bound[$$self.$$.props['wsen']])) {
      console.warn("<Layer2> was created without expected prop 'wsen'");
    }
  });
  const writable_props = ['wsen'];
  Object.keys($$props).forEach(key => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn("<Layer2> was created with unknown prop '".concat(key, "'"));
  });
  $$self.$$set = $$props => {
    if ('wsen' in $$props) $$invalidate(7, wsen = $$props.wsen);
  };
  $$self.$capture_state = () => ({
    getContext,
    wsen,
    _bbox,
    _projectFn,
    abs,
    min,
    xp1,
    xp2,
    yp1,
    yp2,
    height,
    y,
    cy,
    width,
    x,
    cx,
    y2,
    x2,
    y1,
    x1,
    $_projectFn,
    $_bbox
  });
  $$self.$inject_state = $$props => {
    if ('wsen' in $$props) $$invalidate(7, wsen = $$props.wsen);
    if ('xp1' in $$props) $$invalidate(0, xp1 = $$props.xp1);
    if ('xp2' in $$props) $$invalidate(1, xp2 = $$props.xp2);
    if ('yp1' in $$props) $$invalidate(8, yp1 = $$props.yp1);
    if ('yp2' in $$props) $$invalidate(9, yp2 = $$props.yp2);
    if ('height' in $$props) $$invalidate(10, height = $$props.height);
    if ('y' in $$props) $$invalidate(11, y = $$props.y);
    if ('cy' in $$props) $$invalidate(2, cy = $$props.cy);
    if ('width' in $$props) $$invalidate(12, width = $$props.width);
    if ('x' in $$props) $$invalidate(13, x = $$props.x);
    if ('cx' in $$props) $$invalidate(3, cx = $$props.cx);
    if ('y2' in $$props) $$invalidate(14, y2 = $$props.y2);
    if ('x2' in $$props) $$invalidate(15, x2 = $$props.x2);
    if ('y1' in $$props) $$invalidate(16, y1 = $$props.y1);
    if ('x1' in $$props) $$invalidate(17, x1 = $$props.x1);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*wsen*/128) {
      $$invalidate(17, [[x1, y1], [x2, y2]] = wsen || [[-180, -90], [180, 90]], x1, ($$invalidate(16, y1), $$invalidate(7, wsen)), ($$invalidate(15, x2), $$invalidate(7, wsen)), ($$invalidate(14, y2), $$invalidate(7, wsen)));
    }
    if ($$self.$$.dirty & /*$_bbox, $_projectFn, x1, y1*/983040) {
      var _$_projectFn;
      // eslint-disable-next-line no-unused-expressions, no-sequences
      $$invalidate(0, ({
        x: xp1,
        y: yp1
      } = (_$_projectFn = $_projectFn) === null || _$_projectFn === void 0 ? void 0 : _$_projectFn([x1, y1])), xp1, ((((($$invalidate(8, yp1), $$invalidate(19, $_bbox)), $$invalidate(18, $_projectFn)), $$invalidate(17, x1)), $$invalidate(16, y1)), $$invalidate(7, wsen)));
    }
    if ($$self.$$.dirty & /*$_bbox, $_projectFn, x2, y2*/835584) {
      var _$_projectFn2;
      // eslint-disable-next-line no-unused-expressions, no-sequences
      $$invalidate(1, ({
        x: xp2,
        y: yp2
      } = (_$_projectFn2 = $_projectFn) === null || _$_projectFn2 === void 0 ? void 0 : _$_projectFn2([x2, y2])), xp2, ((((($$invalidate(9, yp2), $$invalidate(19, $_bbox)), $$invalidate(18, $_projectFn)), $$invalidate(15, x2)), $$invalidate(14, y2)), $$invalidate(7, wsen)));
    }
    if ($$self.$$.dirty & /*xp1, xp2*/3) {
      $$invalidate(13, x = min(xp1, xp2));
    }
    if ($$self.$$.dirty & /*yp1, yp2*/768) {
      $$invalidate(11, y = min(yp1, yp2));
    }
    if ($$self.$$.dirty & /*xp2, xp1*/3) {
      $$invalidate(12, width = abs(xp2 - xp1));
    }
    if ($$self.$$.dirty & /*yp2, yp1*/768) {
      $$invalidate(10, height = abs(yp2 - yp1));
    }
    if ($$self.$$.dirty & /*x, width*/12288) {
      $$invalidate(3, cx = x + width / 2);
    }
    if ($$self.$$.dirty & /*y, height*/3072) {
      $$invalidate(2, cy = y + height / 2);
    }
  };
  return [xp1, xp2, cy, cx, _bbox, _projectFn, abs, wsen, yp1, yp2, height, y, width, x, y2, x2, y1, x1, $_projectFn, $_bbox];
}
class Layer2 extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance, create_fragment, safe_not_equal, {
      wsen: 7
    });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Layer2",
      options,
      id: create_fragment.name
    });
  }
  get wsen() {
    throw new Error("<Layer2>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set wsen(value) {
    throw new Error("<Layer2>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
}

export { Layer2 as default };
