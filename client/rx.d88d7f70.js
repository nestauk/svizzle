import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, I as svg_element, J as claim_svg_element, g as children, b as detach_dev, k as attr_dev, m as add_location, n as insert_hydration_dev, p as noop, bD as readable, by as writable, ct as get_store_value } from './client.7dada05b.js';

/* ../../components/ui/src/icons/feather/Activity.svelte generated by Svelte v3.59.2 */

const file$4 = "../../components/ui/src/icons/feather/Activity.svelte";

function create_fragment$4(ctx) {
	let polyline;

	const block = {
		c: function create() {
			polyline = svg_element("polyline");
			this.h();
		},
		l: function claim(nodes) {
			polyline = claim_svg_element(nodes, "polyline", { points: true });
			children(polyline).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(polyline, "points", "22 12 18 12 15 21 9 3 6 12 2 12");
			add_location(polyline, file$4, 1, 0, 34);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, polyline, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(polyline);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$4.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$4($$self, $$props) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Activity', slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Activity> was created with unknown prop '${key}'`);
	});

	return [];
}

class Activity extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$4, create_fragment$4, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Activity",
			options,
			id: create_fragment$4.name
		});
	}
}

var Activity$1 = Activity;

/* ../../components/ui/src/icons/feather/BarChart.svelte generated by Svelte v3.59.2 */

const file$3 = "../../components/ui/src/icons/feather/BarChart.svelte";

function create_fragment$3(ctx) {
	let line0;
	let line1;
	let line2;

	const block = {
		c: function create() {
			line0 = svg_element("line");
			line1 = svg_element("line");
			line2 = svg_element("line");
			this.h();
		},
		l: function claim(nodes) {
			line0 = claim_svg_element(nodes, "line", { x1: true, y1: true, x2: true, y2: true });
			children(line0).forEach(detach_dev);
			line1 = claim_svg_element(nodes, "line", { x1: true, y1: true, x2: true, y2: true });
			children(line1).forEach(detach_dev);
			line2 = claim_svg_element(nodes, "line", { x1: true, y1: true, x2: true, y2: true });
			children(line2).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(line0, "x1", "12");
			attr_dev(line0, "y1", "20");
			attr_dev(line0, "x2", "12");
			attr_dev(line0, "y2", "10");
			add_location(line0, file$3, 1, 0, 34);
			attr_dev(line1, "x1", "18");
			attr_dev(line1, "y1", "20");
			attr_dev(line1, "x2", "18");
			attr_dev(line1, "y2", "4");
			add_location(line1, file$3, 1, 45, 79);
			attr_dev(line2, "x1", "6");
			attr_dev(line2, "y1", "20");
			attr_dev(line2, "x2", "6");
			attr_dev(line2, "y2", "16");
			add_location(line2, file$3, 1, 89, 123);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, line0, anchor);
			insert_hydration_dev(target, line1, anchor);
			insert_hydration_dev(target, line2, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(line0);
			if (detaching) detach_dev(line1);
			if (detaching) detach_dev(line2);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$3.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$3($$self, $$props) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('BarChart', slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<BarChart> was created with unknown prop '${key}'`);
	});

	return [];
}

class BarChart extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$3, create_fragment$3, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "BarChart",
			options,
			id: create_fragment$3.name
		});
	}
}

var BarChart$1 = BarChart;

/* ../../components/ui/src/icons/feather/Clock.svelte generated by Svelte v3.59.2 */

const file$2 = "../../components/ui/src/icons/feather/Clock.svelte";

function create_fragment$2(ctx) {
	let circle;
	let polyline;

	const block = {
		c: function create() {
			circle = svg_element("circle");
			polyline = svg_element("polyline");
			this.h();
		},
		l: function claim(nodes) {
			circle = claim_svg_element(nodes, "circle", { cx: true, cy: true, r: true });
			children(circle).forEach(detach_dev);
			polyline = claim_svg_element(nodes, "polyline", { points: true });
			children(polyline).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(circle, "cx", "12");
			attr_dev(circle, "cy", "12");
			attr_dev(circle, "r", "10");
			add_location(circle, file$2, 1, 0, 34);
			attr_dev(polyline, "points", "12 6 12 12 16 14");
			add_location(polyline, file$2, 1, 40, 74);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, circle, anchor);
			insert_hydration_dev(target, polyline, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(circle);
			if (detaching) detach_dev(polyline);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Clock', slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Clock> was created with unknown prop '${key}'`);
	});

	return [];
}

class Clock extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$2, create_fragment$2, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Clock",
			options,
			id: create_fragment$2.name
		});
	}
}

var Clock$1 = Clock;

/* ../../components/ui/src/icons/feather/List.svelte generated by Svelte v3.59.2 */

const file$1 = "../../components/ui/src/icons/feather/List.svelte";

function create_fragment$1(ctx) {
	let line0;
	let line1;
	let line2;
	let line3;
	let line4;
	let line5;

	const block = {
		c: function create() {
			line0 = svg_element("line");
			line1 = svg_element("line");
			line2 = svg_element("line");
			line3 = svg_element("line");
			line4 = svg_element("line");
			line5 = svg_element("line");
			this.h();
		},
		l: function claim(nodes) {
			line0 = claim_svg_element(nodes, "line", { x1: true, y1: true, x2: true, y2: true });
			children(line0).forEach(detach_dev);
			line1 = claim_svg_element(nodes, "line", { x1: true, y1: true, x2: true, y2: true });
			children(line1).forEach(detach_dev);
			line2 = claim_svg_element(nodes, "line", { x1: true, y1: true, x2: true, y2: true });
			children(line2).forEach(detach_dev);
			line3 = claim_svg_element(nodes, "line", { x1: true, y1: true, x2: true, y2: true });
			children(line3).forEach(detach_dev);
			line4 = claim_svg_element(nodes, "line", { x1: true, y1: true, x2: true, y2: true });
			children(line4).forEach(detach_dev);
			line5 = claim_svg_element(nodes, "line", { x1: true, y1: true, x2: true, y2: true });
			children(line5).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(line0, "x1", "8");
			attr_dev(line0, "y1", "6");
			attr_dev(line0, "x2", "21");
			attr_dev(line0, "y2", "6");
			add_location(line0, file$1, 1, 0, 34);
			attr_dev(line1, "x1", "8");
			attr_dev(line1, "y1", "12");
			attr_dev(line1, "x2", "21");
			attr_dev(line1, "y2", "12");
			add_location(line1, file$1, 1, 42, 76);
			attr_dev(line2, "x1", "8");
			attr_dev(line2, "y1", "18");
			attr_dev(line2, "x2", "21");
			attr_dev(line2, "y2", "18");
			add_location(line2, file$1, 1, 86, 120);
			attr_dev(line3, "x1", "3");
			attr_dev(line3, "y1", "6");
			attr_dev(line3, "x2", "3.01");
			attr_dev(line3, "y2", "6");
			add_location(line3, file$1, 1, 130, 164);
			attr_dev(line4, "x1", "3");
			attr_dev(line4, "y1", "12");
			attr_dev(line4, "x2", "3.01");
			attr_dev(line4, "y2", "12");
			add_location(line4, file$1, 1, 174, 208);
			attr_dev(line5, "x1", "3");
			attr_dev(line5, "y1", "18");
			attr_dev(line5, "x2", "3.01");
			attr_dev(line5, "y2", "18");
			add_location(line5, file$1, 1, 220, 254);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, line0, anchor);
			insert_hydration_dev(target, line1, anchor);
			insert_hydration_dev(target, line2, anchor);
			insert_hydration_dev(target, line3, anchor);
			insert_hydration_dev(target, line4, anchor);
			insert_hydration_dev(target, line5, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(line0);
			if (detaching) detach_dev(line1);
			if (detaching) detach_dev(line2);
			if (detaching) detach_dev(line3);
			if (detaching) detach_dev(line4);
			if (detaching) detach_dev(line5);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('List', slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<List> was created with unknown prop '${key}'`);
	});

	return [];
}

class List extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "List",
			options,
			id: create_fragment$1.name
		});
	}
}

var List$1 = List;

/* ../../components/ui/src/icons/feather/MapPin.svelte generated by Svelte v3.59.2 */

const file = "../../components/ui/src/icons/feather/MapPin.svelte";

function create_fragment(ctx) {
	let path;
	let circle;

	const block = {
		c: function create() {
			path = svg_element("path");
			circle = svg_element("circle");
			this.h();
		},
		l: function claim(nodes) {
			path = claim_svg_element(nodes, "path", { d: true });
			children(path).forEach(detach_dev);
			circle = claim_svg_element(nodes, "circle", { cx: true, cy: true, r: true });
			children(circle).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(path, "d", "M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z");
			add_location(path, file, 1, 0, 34);
			attr_dev(circle, "cx", "12");
			attr_dev(circle, "cy", "10");
			attr_dev(circle, "r", "3");
			add_location(circle, file, 1, 64, 98);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, path, anchor);
			insert_hydration_dev(target, circle, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(path);
			if (detaching) detach_dev(circle);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('MapPin', slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<MapPin> was created with unknown prop '${key}'`);
	});

	return [];
}

class MapPin extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "MapPin",
			options,
			id: create_fragment.name
		});
	}
}

var MapPin$1 = MapPin;

const rxStreamToSvReadable = rxStream => readable(
	rxStream.getValue?.(),
	set => {
		const subscription = rxStream.subscribe(value => set(value));

		return () => subscription.unsubscribe();
	}
);

const rxStreamToSvWritable = rxStream => {
	const store = writable(
		rxStream.getValue?.(),
		set => {
			const subscription = rxStream.subscribe(
				value => value !== get_store_value(store) && set(value)
			);

			return () => subscription.unsubscribe();
		}
	);
	store.subscribe(value => rxStream.next(value));

	return store;
};

export { Activity$1 as A, BarChart$1 as B, Clock$1 as C, List$1 as L, MapPin$1 as M, rxStreamToSvWritable as a, rxStreamToSvReadable as r };
