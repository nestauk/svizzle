import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, bv as getContext, ax as validate_store, aJ as component_subscribe, I as svg_element, a as space, t as text, J as claim_svg_element, g as children, b as detach_dev, c as claim_space, j as claim_text, k as attr_dev, m as add_location, n as insert_hydration_dev, o as append_hydration_dev, p as noop } from './client.7dada05b.js';

/* src/routes/compounds/mapbox/components/Layer1.svelte generated by Svelte v3.59.2 */
const file = "src/routes/compounds/mapbox/components/Layer1.svelte";

function create_fragment(ctx) {
	let rect;
	let t0;
	let text_1;
	let t1;
	let text_1_x_value;
	let text_1_y_value;

	const block = {
		c: function create() {
			rect = svg_element("rect");
			t0 = space();
			text_1 = svg_element("text");
			t1 = text("Layer 1");
			this.h();
		},
		l: function claim(nodes) {
			rect = claim_svg_element(nodes, "rect", {
				x: true,
				y: true,
				width: true,
				height: true,
				stroke: true,
				fill: true
			});

			children(rect).forEach(detach_dev);
			t0 = claim_space(nodes);

			text_1 = claim_svg_element(nodes, "text", {
				x: true,
				y: true,
				"text-anchor": true,
				"dominant-baseline": true
			});

			var text_1_nodes = children(text_1);
			t1 = claim_text(text_1_nodes, "Layer 1");
			text_1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(rect, "x", /*x*/ ctx[3]);
			attr_dev(rect, "y", /*y*/ ctx[2]);
			attr_dev(rect, "width", /*width*/ ctx[1]);
			attr_dev(rect, "height", /*height*/ ctx[0]);
			attr_dev(rect, "stroke", "red");
			attr_dev(rect, "fill", "#F008");
			add_location(rect, file, 22, 0, 576);
			attr_dev(text_1, "x", text_1_x_value = /*x*/ ctx[3] + /*width*/ ctx[1] / 2);
			attr_dev(text_1, "y", text_1_y_value = /*y*/ ctx[2] + /*height*/ ctx[0] / 2);
			attr_dev(text_1, "text-anchor", "middle");
			attr_dev(text_1, "dominant-baseline", "middle");
			add_location(text_1, file, 31, 0, 643);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, rect, anchor);
			insert_hydration_dev(target, t0, anchor);
			insert_hydration_dev(target, text_1, anchor);
			append_hydration_dev(text_1, t1);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*x*/ 8) {
				attr_dev(rect, "x", /*x*/ ctx[3]);
			}

			if (dirty & /*y*/ 4) {
				attr_dev(rect, "y", /*y*/ ctx[2]);
			}

			if (dirty & /*width*/ 2) {
				attr_dev(rect, "width", /*width*/ ctx[1]);
			}

			if (dirty & /*height*/ 1) {
				attr_dev(rect, "height", /*height*/ ctx[0]);
			}

			if (dirty & /*x, width*/ 10 && text_1_x_value !== (text_1_x_value = /*x*/ ctx[3] + /*width*/ ctx[1] / 2)) {
				attr_dev(text_1, "x", text_1_x_value);
			}

			if (dirty & /*y, height*/ 5 && text_1_y_value !== (text_1_y_value = /*y*/ ctx[2] + /*height*/ ctx[0] / 2)) {
				attr_dev(text_1, "y", text_1_y_value);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(rect);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(text_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let x1;
	let y1;
	let x2;
	let y2;
	let x;
	let y;
	let width;
	let height;
	let $_projectFn;
	let $_bbox;
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Layer1', slots, []);
	let { wsen } = $$props;
	const { _bbox, _projectFn } = getContext('Mapbox');
	validate_store(_bbox, '_bbox');
	component_subscribe($$self, _bbox, value => $$invalidate(16, $_bbox = value));
	validate_store(_projectFn, '_projectFn');
	component_subscribe($$self, _projectFn, value => $$invalidate(15, $_projectFn = value));
	const { abs, min } = Math;
	let xp1, xp2, yp1, yp2;

	$$self.$$.on_mount.push(function () {
		if (wsen === undefined && !('wsen' in $$props || $$self.$$.bound[$$self.$$.props['wsen']])) {
			console.warn("<Layer1> was created without expected prop 'wsen'");
		}
	});

	const writable_props = ['wsen'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Layer1> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('wsen' in $$props) $$invalidate(6, wsen = $$props.wsen);
	};

	$$self.$capture_state = () => ({
		getContext,
		wsen,
		_bbox,
		_projectFn,
		abs,
		min,
		xp1,
		xp2,
		yp1,
		yp2,
		height,
		width,
		y,
		x,
		y2,
		x2,
		y1,
		x1,
		$_projectFn,
		$_bbox
	});

	$$self.$inject_state = $$props => {
		if ('wsen' in $$props) $$invalidate(6, wsen = $$props.wsen);
		if ('xp1' in $$props) $$invalidate(7, xp1 = $$props.xp1);
		if ('xp2' in $$props) $$invalidate(8, xp2 = $$props.xp2);
		if ('yp1' in $$props) $$invalidate(9, yp1 = $$props.yp1);
		if ('yp2' in $$props) $$invalidate(10, yp2 = $$props.yp2);
		if ('height' in $$props) $$invalidate(0, height = $$props.height);
		if ('width' in $$props) $$invalidate(1, width = $$props.width);
		if ('y' in $$props) $$invalidate(2, y = $$props.y);
		if ('x' in $$props) $$invalidate(3, x = $$props.x);
		if ('y2' in $$props) $$invalidate(11, y2 = $$props.y2);
		if ('x2' in $$props) $$invalidate(12, x2 = $$props.x2);
		if ('y1' in $$props) $$invalidate(13, y1 = $$props.y1);
		if ('x1' in $$props) $$invalidate(14, x1 = $$props.x1);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*wsen*/ 64) {
			$$invalidate(14, [[x1, y1], [x2, y2]] = wsen || [[-180, -90], [180, 90]], x1, ($$invalidate(13, y1), $$invalidate(6, wsen)), ($$invalidate(12, x2), $$invalidate(6, wsen)), ($$invalidate(11, y2), $$invalidate(6, wsen)));
		}

		if ($$self.$$.dirty & /*$_bbox, $_projectFn, x1, y1*/ 122880) {
			// eslint-disable-next-line no-unused-expressions, no-sequences
			($$invalidate(7, { x: xp1, y: yp1 } = $_projectFn?.([x1, y1]), xp1, ((((($$invalidate(9, yp1), $$invalidate(16, $_bbox)), $$invalidate(15, $_projectFn)), $$invalidate(14, x1)), $$invalidate(13, y1)), $$invalidate(6, wsen))));
		}

		if ($$self.$$.dirty & /*$_bbox, $_projectFn, x2, y2*/ 104448) {
			// eslint-disable-next-line no-unused-expressions, no-sequences
			($$invalidate(8, { x: xp2, y: yp2 } = $_projectFn?.([x2, y2]), xp2, ((((($$invalidate(10, yp2), $$invalidate(16, $_bbox)), $$invalidate(15, $_projectFn)), $$invalidate(12, x2)), $$invalidate(11, y2)), $$invalidate(6, wsen))));
		}

		if ($$self.$$.dirty & /*xp1, xp2*/ 384) {
			$$invalidate(3, x = min(xp1, xp2));
		}

		if ($$self.$$.dirty & /*yp1, yp2*/ 1536) {
			$$invalidate(2, y = min(yp1, yp2));
		}

		if ($$self.$$.dirty & /*xp2, xp1*/ 384) {
			$$invalidate(1, width = abs(xp2 - xp1));
		}

		if ($$self.$$.dirty & /*yp2, yp1*/ 1536) {
			$$invalidate(0, height = abs(yp2 - yp1));
		}
	};

	return [
		height,
		width,
		y,
		x,
		_bbox,
		_projectFn,
		wsen,
		xp1,
		xp2,
		yp1,
		yp2,
		y2,
		x2,
		y1,
		x1,
		$_projectFn,
		$_bbox
	];
}

class Layer1 extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { wsen: 6 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Layer1",
			options,
			id: create_fragment.name
		});
	}

	get wsen() {
		throw new Error("<Layer1>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set wsen(value) {
		throw new Error("<Layer1>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { Layer1 as default };
