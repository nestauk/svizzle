import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, q as validate_each_argument, r as create_slot, v as validate_slots, e as element, a as space, f as claim_element, g as children, b as detach_dev, c as claim_space, k as attr_dev, m as add_location, n as insert_hydration_dev, o as append_hydration_dev, u as transition_in, w as group_outros, x as check_outros, y as update_slot_base, z as get_all_dirty_from_scope, A as get_slot_changes, B as transition_out, C as destroy_each, D as create_component, E as claim_component, F as mount_component, G as destroy_component, t as text, j as claim_text, H as toggle_class } from './client.7dada05b.js';
import { H as HyperLink } from './HyperLink.24c4b6ad.js';

/* src/routes/compounds/mapbox/_layout.svelte generated by Svelte v3.59.2 */
const file = "src/routes/compounds/mapbox/_layout.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[4] = list[i];
	return child_ctx;
}

// (12:3) <HyperLink     href='compounds/mapbox/{example}'     rel='prefetch'    >
function create_default_slot(ctx) {
	let p;
	let t0_value = /*example*/ ctx[4] + "";
	let t0;
	let t1;

	const block = {
		c: function create() {
			p = element("p");
			t0 = text(t0_value);
			t1 = space();
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", { class: true });
			var p_nodes = children(p);
			t0 = claim_text(p_nodes, t0_value);
			p_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			this.h();
		},
		h: function hydrate() {
			attr_dev(p, "class", "svelte-1j7t2sn");
			toggle_class(p, "selected", /*example*/ ctx[4] === /*segment*/ ctx[0]);
			add_location(p, file, 15, 4, 303);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, p, anchor);
			append_hydration_dev(p, t0);
			insert_hydration_dev(target, t1, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*examples, segment*/ 3) {
				toggle_class(p, "selected", /*example*/ ctx[4] === /*segment*/ ctx[0]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
			if (detaching) detach_dev(t1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(12:3) <HyperLink     href='compounds/mapbox/{example}'     rel='prefetch'    >",
		ctx
	});

	return block;
}

// (11:2) {#each examples as example}
function create_each_block(ctx) {
	let hyperlink;
	let current;

	hyperlink = new HyperLink({
			props: {
				href: "compounds/mapbox/" + /*example*/ ctx[4],
				rel: "prefetch",
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(hyperlink.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(hyperlink.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(hyperlink, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const hyperlink_changes = {};

			if (dirty & /*$$scope, segment*/ 9) {
				hyperlink_changes.$$scope = { dirty, ctx };
			}

			hyperlink.$set(hyperlink_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(hyperlink.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(hyperlink.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(hyperlink, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(11:2) {#each examples as example}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let section;
	let nav;
	let t;
	let main;
	let current;
	let each_value = /*examples*/ ctx[1];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const default_slot_template = /*#slots*/ ctx[2].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);

	const block = {
		c: function create() {
			section = element("section");
			nav = element("nav");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t = space();
			main = element("main");
			if (default_slot) default_slot.c();
			this.h();
		},
		l: function claim(nodes) {
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			nav = claim_element(section_nodes, "NAV", { class: true });
			var nav_nodes = children(nav);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nav_nodes);
			}

			nav_nodes.forEach(detach_dev);
			t = claim_space(section_nodes);
			main = claim_element(section_nodes, "MAIN", { class: true });
			var main_nodes = children(main);
			if (default_slot) default_slot.l(main_nodes);
			main_nodes.forEach(detach_dev);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(nav, "class", "svelte-1j7t2sn");
			add_location(nav, file, 9, 1, 187);
			attr_dev(main, "class", "svelte-1j7t2sn");
			add_location(main, file, 21, 1, 405);
			attr_dev(section, "class", "svelte-1j7t2sn");
			add_location(section, file, 8, 0, 176);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, section, anchor);
			append_hydration_dev(section, nav);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(nav, null);
				}
			}

			append_hydration_dev(section, t);
			append_hydration_dev(section, main);

			if (default_slot) {
				default_slot.m(main, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*examples, segment*/ 3) {
				each_value = /*examples*/ ctx[1];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(nav, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 8)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[3],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[3])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[3], dirty, null),
						null
					);
				}
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(section);
			destroy_each(each_blocks, detaching);
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Layout', slots, ['default']);
	let { segment } = $$props;
	const examples = ['empty', 'layers', 'custom_controls', 'all'];

	$$self.$$.on_mount.push(function () {
		if (segment === undefined && !('segment' in $$props || $$self.$$.bound[$$self.$$.props['segment']])) {
			console.warn("<Layout> was created without expected prop 'segment'");
		}
	});

	const writable_props = ['segment'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Layout> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('segment' in $$props) $$invalidate(0, segment = $$props.segment);
		if ('$$scope' in $$props) $$invalidate(3, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({ HyperLink, segment, examples });

	$$self.$inject_state = $$props => {
		if ('segment' in $$props) $$invalidate(0, segment = $$props.segment);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [segment, examples, slots, $$scope];
}

class Layout extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { segment: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Layout",
			options,
			id: create_fragment.name
		});
	}

	get segment() {
		throw new Error("<Layout>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set segment(value) {
		throw new Error("<Layout>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { Layout as default };
