import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, e as element, D as create_component, f as claim_element, g as children, E as claim_component, b as detach_dev, k as attr_dev, m as add_location, n as insert_hydration_dev, F as mount_component, u as transition_in, B as transition_out, G as destroy_component, a as space, c as claim_space, p as noop } from './client.7dada05b.js';
import { M as Mapbox } from './Mapbox.38cf7ffe.js';
import { S as SvgLayer } from './SvgLayer.30d9d854.js';
import Layer1 from './Layer1.352576e5.js';
import Layer2 from './Layer2.25905070.js';

/* src/routes/compounds/mapbox/layers.svelte generated by Svelte v3.59.2 */
const file = "src/routes/compounds/mapbox/layers.svelte";

// (18:2) <SvgLayer    interactive={false}    order={1}   >
function create_default_slot_2(ctx) {
	let layer1;
	let current;

	layer1 = new Layer1({
			props: { wsen: [[-140, 0], [-50, 70]] },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(layer1.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(layer1.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(layer1, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(layer1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(layer1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(layer1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(18:2) <SvgLayer    interactive={false}    order={1}   >",
		ctx
	});

	return block;
}

// (25:2) <SvgLayer    interactive={false}    order={1}   >
function create_default_slot_1(ctx) {
	let layer2;
	let current;

	layer2 = new Layer2({
			props: { wsen: [[50, 0], [140, 70]] },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(layer2.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(layer2.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(layer2, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(layer2.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(layer2.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(layer2, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(25:2) <SvgLayer    interactive={false}    order={1}   >",
		ctx
	});

	return block;
}

// (12:1) <Mapbox   {accessToken}   {style}   withScaleControl={true}   withZoomControl={true}  >
function create_default_slot(ctx) {
	let svglayer0;
	let t;
	let svglayer1;
	let current;

	svglayer0 = new SvgLayer({
			props: {
				interactive: false,
				order: 1,
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	svglayer1 = new SvgLayer({
			props: {
				interactive: false,
				order: 1,
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(svglayer0.$$.fragment);
			t = space();
			create_component(svglayer1.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(svglayer0.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(svglayer1.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(svglayer0, target, anchor);
			insert_hydration_dev(target, t, anchor);
			mount_component(svglayer1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const svglayer0_changes = {};

			if (dirty & /*$$scope*/ 1) {
				svglayer0_changes.$$scope = { dirty, ctx };
			}

			svglayer0.$set(svglayer0_changes);
			const svglayer1_changes = {};

			if (dirty & /*$$scope*/ 1) {
				svglayer1_changes.$$scope = { dirty, ctx };
			}

			svglayer1.$set(svglayer1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(svglayer0.$$.fragment, local);
			transition_in(svglayer1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(svglayer0.$$.fragment, local);
			transition_out(svglayer1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(svglayer0, detaching);
			if (detaching) detach_dev(t);
			destroy_component(svglayer1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(12:1) <Mapbox   {accessToken}   {style}   withScaleControl={true}   withZoomControl={true}  >",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div;
	let mapbox;
	let current;

	mapbox = new Mapbox({
			props: {
				accessToken,
				style,
				withScaleControl: true,
				withZoomControl: true,
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			create_component(mapbox.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			claim_component(mapbox.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "map-container svelte-vpafuk");
			add_location(div, file, 10, 0, 357);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, div, anchor);
			mount_component(mapbox, div, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const mapbox_changes = {};

			if (dirty & /*$$scope*/ 1) {
				mapbox_changes.$$scope = { dirty, ctx };
			}

			mapbox.$set(mapbox_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(mapbox.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(mapbox.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(mapbox);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

const accessToken = 'pk.eyJ1IjoibmVzdGEtdWsiLCJhIjoiY2ozbjUzY2drMDAwNzJxbnl6a21uM253cSJ9.3RTMySEVk0LC4gQvGoG-Zw';
const style = 'mapbox://styles/nesta-uk/cl8olrzo200ci16pim0h4c1pn';

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Layers', slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Layers> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({
		Mapbox,
		SvgLayer,
		Layer1,
		Layer2,
		accessToken,
		style
	});

	return [];
}

class Layers extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Layers",
			options,
			id: create_fragment.name
		});
	}
}

export { Layers as default };
