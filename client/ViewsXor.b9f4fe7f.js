import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, r as create_slot, v as validate_slots, ax as validate_store, aJ as component_subscribe, bw as setContext, by as writable, bx as set_store_value, e as element, f as claim_element, g as children, b as detach_dev, k as attr_dev, m as add_location, n as insert_hydration_dev, y as update_slot_base, z as get_all_dirty_from_scope, A as get_slot_changes, u as transition_in, B as transition_out } from './client.7dada05b.js';
import { n as noop } from './any-undefined.7e669ab1.js';

/* ../../components/ui/src/viewports/ViewsXor.svelte generated by Svelte v3.59.2 */
const file = "../../components/ui/src/viewports/ViewsXor.svelte";

function create_fragment(ctx) {
	let div;
	let current;
	const default_slot_template = /*#slots*/ ctx[3].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], null);

	const block = {
		c: function create() {
			div = element("div");
			if (default_slot) default_slot.c();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			if (default_slot) default_slot.l(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "ViewsXor svelte-jl6pdf");
			add_location(div, file, 20, 0, 315);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 4)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[2],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[2])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[2], dirty, null),
						null
					);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let $_viewId;
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('ViewsXor', slots, ['default']);
	let { viewId } = $$props;
	const _viewId = writable();
	validate_store(_viewId, '_viewId');
	component_subscribe($$self, _viewId, value => $$invalidate(4, $_viewId = value));
	const registerView = noop;
	setContext('viewport', { _viewId, registerView, viewType: 'xor' });

	$$self.$$.on_mount.push(function () {
		if (viewId === undefined && !('viewId' in $$props || $$self.$$.bound[$$self.$$.props['viewId']])) {
			console.warn("<ViewsXor> was created without expected prop 'viewId'");
		}
	});

	const writable_props = ['viewId'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ViewsXor> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('viewId' in $$props) $$invalidate(1, viewId = $$props.viewId);
		if ('$$scope' in $$props) $$invalidate(2, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({
		noop,
		setContext,
		writable,
		viewId,
		_viewId,
		registerView,
		$_viewId
	});

	$$self.$inject_state = $$props => {
		if ('viewId' in $$props) $$invalidate(1, viewId = $$props.viewId);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*viewId*/ 2) {
			set_store_value(_viewId, $_viewId = viewId, $_viewId);
		}
	};

	return [_viewId, viewId, $$scope, slots];
}

class ViewsXor extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { viewId: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "ViewsXor",
			options,
			id: create_fragment.name
		});
	}

	get viewId() {
		throw new Error("<ViewsXor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set viewId(value) {
		throw new Error("<ViewsXor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

var ViewsXor$1 = ViewsXor;

export { ViewsXor$1 as V };
