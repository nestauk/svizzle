import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, r as create_slot, v as validate_slots, bb as getContext, am as validate_store, aw as component_subscribe, e as element, f as claim_element, g as children, b as detach_dev, m as add_location, n as insert_hydration_dev, ay as action_destroyer, y as update_slot_base, z as get_all_dirty_from_scope, A as get_slot_changes, u as transition_in, B as transition_out } from './client.72b2bd20.js';
import { C as CustomControl$1 } from './Mapbox.afb4fa09.js';

/* ../../components/mapbox/src/CustomControl.svelte generated by Svelte v3.59.2 */
const file = "../../components/mapbox/src/CustomControl.svelte";

function create_fragment(ctx) {
	let div;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[4].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);

	const block = {
		c: function create() {
			div = element("div");
			if (default_slot) default_slot.c();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", {});
			var div_nodes = children(div);
			if (default_slot) default_slot.l(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(div, file, 21, 0, 351);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;

			if (!mounted) {
				dispose = action_destroyer(/*customControl*/ ctx[1].call(null, div));
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 8)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[3],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[3])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[3], dirty, null),
						null
					);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let $_map;
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('CustomControl', slots, ['default']);
	let { position } = $$props;
	const { _map } = getContext('mapBox');
	validate_store(_map, '_map');
	component_subscribe($$self, _map, value => $$invalidate(5, $_map = value));

	const customControl = node => {
		const control = new CustomControl$1(node);
		$_map.addControl(control, position);

		return {
			destroy() {
				$_map.removeControl(control);
			}
		};
	};

	$$self.$$.on_mount.push(function () {
		if (position === undefined && !('position' in $$props || $$self.$$.bound[$$self.$$.props['position']])) {
			console.warn("<CustomControl> was created without expected prop 'position'");
		}
	});

	const writable_props = ['position'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<CustomControl> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('position' in $$props) $$invalidate(2, position = $$props.position);
		if ('$$scope' in $$props) $$invalidate(3, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({
		getContext,
		CustomControl: CustomControl$1,
		position,
		_map,
		customControl,
		$_map
	});

	$$self.$inject_state = $$props => {
		if ('position' in $$props) $$invalidate(2, position = $$props.position);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [_map, customControl, position, $$scope, slots];
}

class CustomControl_1 extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { position: 2 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "CustomControl_1",
			options,
			id: create_fragment.name
		});
	}

	get position() {
		throw new Error("<CustomControl>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set position(value) {
		throw new Error("<CustomControl>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

var CustomControl = CustomControl_1;

export { CustomControl as C };
