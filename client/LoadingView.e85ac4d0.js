import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, I as svg_element, J as claim_svg_element, g as children, b as detach_dev, j as attr_dev, l as add_location, m as insert_hydration_dev, o as noop, K as Icon, e as element, t as text, f as claim_element, h as claim_text, n as append_hydration_dev, Z as set_data_dev, C as create_component, a as space, D as claim_component, c as claim_space, E as mount_component, u as transition_in, w as transition_out, F as destroy_component } from './client.5c29960b.js';

/* ../../components/ui/src/icons/feather/Loader.svelte generated by Svelte v3.44.2 */

const file$1 = "../../components/ui/src/icons/feather/Loader.svelte";

function create_fragment$1(ctx) {
	let line0;
	let line1;
	let line2;
	let line3;
	let line4;
	let line5;
	let line6;
	let line7;

	const block = {
		c: function create() {
			line0 = svg_element("line");
			line1 = svg_element("line");
			line2 = svg_element("line");
			line3 = svg_element("line");
			line4 = svg_element("line");
			line5 = svg_element("line");
			line6 = svg_element("line");
			line7 = svg_element("line");
			this.h();
		},
		l: function claim(nodes) {
			line0 = claim_svg_element(nodes, "line", { x1: true, y1: true, x2: true, y2: true });
			children(line0).forEach(detach_dev);
			line1 = claim_svg_element(nodes, "line", { x1: true, y1: true, x2: true, y2: true });
			children(line1).forEach(detach_dev);
			line2 = claim_svg_element(nodes, "line", { x1: true, y1: true, x2: true, y2: true });
			children(line2).forEach(detach_dev);
			line3 = claim_svg_element(nodes, "line", { x1: true, y1: true, x2: true, y2: true });
			children(line3).forEach(detach_dev);
			line4 = claim_svg_element(nodes, "line", { x1: true, y1: true, x2: true, y2: true });
			children(line4).forEach(detach_dev);
			line5 = claim_svg_element(nodes, "line", { x1: true, y1: true, x2: true, y2: true });
			children(line5).forEach(detach_dev);
			line6 = claim_svg_element(nodes, "line", { x1: true, y1: true, x2: true, y2: true });
			children(line6).forEach(detach_dev);
			line7 = claim_svg_element(nodes, "line", { x1: true, y1: true, x2: true, y2: true });
			children(line7).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(line0, "x1", "12");
			attr_dev(line0, "y1", "2");
			attr_dev(line0, "x2", "12");
			attr_dev(line0, "y2", "6");
			add_location(line0, file$1, 1, 0, 34);
			attr_dev(line1, "x1", "12");
			attr_dev(line1, "y1", "18");
			attr_dev(line1, "x2", "12");
			attr_dev(line1, "y2", "22");
			add_location(line1, file$1, 1, 43, 77);
			attr_dev(line2, "x1", "4.93");
			attr_dev(line2, "y1", "4.93");
			attr_dev(line2, "x2", "7.76");
			attr_dev(line2, "y2", "7.76");
			add_location(line2, file$1, 1, 88, 122);
			attr_dev(line3, "x1", "16.24");
			attr_dev(line3, "y1", "16.24");
			attr_dev(line3, "x2", "19.07");
			attr_dev(line3, "y2", "19.07");
			add_location(line3, file$1, 1, 141, 175);
			attr_dev(line4, "x1", "2");
			attr_dev(line4, "y1", "12");
			attr_dev(line4, "x2", "6");
			attr_dev(line4, "y2", "12");
			add_location(line4, file$1, 1, 198, 232);
			attr_dev(line5, "x1", "18");
			attr_dev(line5, "y1", "12");
			attr_dev(line5, "x2", "22");
			attr_dev(line5, "y2", "12");
			add_location(line5, file$1, 1, 241, 275);
			attr_dev(line6, "x1", "4.93");
			attr_dev(line6, "y1", "19.07");
			attr_dev(line6, "x2", "7.76");
			attr_dev(line6, "y2", "16.24");
			add_location(line6, file$1, 1, 286, 320);
			attr_dev(line7, "x1", "16.24");
			attr_dev(line7, "y1", "7.76");
			attr_dev(line7, "x2", "19.07");
			attr_dev(line7, "y2", "4.93");
			add_location(line7, file$1, 1, 341, 375);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, line0, anchor);
			insert_hydration_dev(target, line1, anchor);
			insert_hydration_dev(target, line2, anchor);
			insert_hydration_dev(target, line3, anchor);
			insert_hydration_dev(target, line4, anchor);
			insert_hydration_dev(target, line5, anchor);
			insert_hydration_dev(target, line6, anchor);
			insert_hydration_dev(target, line7, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(line0);
			if (detaching) detach_dev(line1);
			if (detaching) detach_dev(line2);
			if (detaching) detach_dev(line3);
			if (detaching) detach_dev(line4);
			if (detaching) detach_dev(line5);
			if (detaching) detach_dev(line6);
			if (detaching) detach_dev(line7);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Loader', slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Loader> was created with unknown prop '${key}'`);
	});

	return [];
}

class Loader extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Loader",
			options,
			id: create_fragment$1.name
		});
	}
}

var Loader$1 = Loader;

/* ../../components/ui/src/LoadingView.svelte generated by Svelte v3.44.2 */
const file = "../../components/ui/src/LoadingView.svelte";

// (31:1) {#if message}
function create_if_block(ctx) {
	let div;
	let span;
	let t;

	const block = {
		c: function create() {
			div = element("div");
			span = element("span");
			t = text(/*message*/ ctx[2]);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", {});
			var div_nodes = children(div);
			span = claim_element(div_nodes, "SPAN", {});
			var span_nodes = children(span);
			t = claim_text(span_nodes, /*message*/ ctx[2]);
			span_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(span, file, 32, 3, 668);
			add_location(div, file, 31, 2, 659);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, div, anchor);
			append_hydration_dev(div, span);
			append_hydration_dev(span, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*message*/ 4) set_data_dev(t, /*message*/ ctx[2]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(31:1) {#if message}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div1;
	let div0;
	let icon;
	let t;
	let current;

	icon = new Icon({
			props: {
				fill: /*fill*/ ctx[0],
				glyph: /*glyph*/ ctx[1],
				size: /*size*/ ctx[3],
				stroke: /*stroke*/ ctx[4],
				strokeWidth: /*strokeWidth*/ ctx[5]
			},
			$$inline: true
		});

	let if_block = /*message*/ ctx[2] && create_if_block(ctx);

	const block = {
		c: function create() {
			div1 = element("div");
			div0 = element("div");
			create_component(icon.$$.fragment);
			t = space();
			if (if_block) if_block.c();
			this.h();
		},
		l: function claim(nodes) {
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			claim_component(icon.$$.fragment, div0_nodes);
			div0_nodes.forEach(detach_dev);
			t = claim_space(div1_nodes);
			if (if_block) if_block.l(div1_nodes);
			div1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div0, "class", "spinner svelte-8do3d8");
			add_location(div0, file, 21, 1, 539);
			attr_dev(div1, "class", "LoadingView svelte-8do3d8");
			add_location(div1, file, 20, 0, 512);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, div1, anchor);
			append_hydration_dev(div1, div0);
			mount_component(icon, div0, null);
			append_hydration_dev(div1, t);
			if (if_block) if_block.m(div1, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const icon_changes = {};
			if (dirty & /*fill*/ 1) icon_changes.fill = /*fill*/ ctx[0];
			if (dirty & /*glyph*/ 2) icon_changes.glyph = /*glyph*/ ctx[1];
			if (dirty & /*size*/ 8) icon_changes.size = /*size*/ ctx[3];
			if (dirty & /*stroke*/ 16) icon_changes.stroke = /*stroke*/ ctx[4];
			if (dirty & /*strokeWidth*/ 32) icon_changes.strokeWidth = /*strokeWidth*/ ctx[5];
			icon.$set(icon_changes);

			if (/*message*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(div1, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			destroy_component(icon);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('LoadingView', slots, []);
	let { fill = null } = $$props;
	let { glyph = Loader$1 } = $$props;
	let { message = null } = $$props;
	let { size = 50 } = $$props;
	let { stroke = null } = $$props;
	let { strokeWidth = 0.75 } = $$props;
	const writable_props = ['fill', 'glyph', 'message', 'size', 'stroke', 'strokeWidth'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<LoadingView> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('fill' in $$props) $$invalidate(0, fill = $$props.fill);
		if ('glyph' in $$props) $$invalidate(1, glyph = $$props.glyph);
		if ('message' in $$props) $$invalidate(2, message = $$props.message);
		if ('size' in $$props) $$invalidate(3, size = $$props.size);
		if ('stroke' in $$props) $$invalidate(4, stroke = $$props.stroke);
		if ('strokeWidth' in $$props) $$invalidate(5, strokeWidth = $$props.strokeWidth);
	};

	$$self.$capture_state = () => ({
		Icon,
		Loader: Loader$1,
		fill,
		glyph,
		message,
		size,
		stroke,
		strokeWidth
	});

	$$self.$inject_state = $$props => {
		if ('fill' in $$props) $$invalidate(0, fill = $$props.fill);
		if ('glyph' in $$props) $$invalidate(1, glyph = $$props.glyph);
		if ('message' in $$props) $$invalidate(2, message = $$props.message);
		if ('size' in $$props) $$invalidate(3, size = $$props.size);
		if ('stroke' in $$props) $$invalidate(4, stroke = $$props.stroke);
		if ('strokeWidth' in $$props) $$invalidate(5, strokeWidth = $$props.strokeWidth);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*fill*/ 1) {
			// FIXME https://github.com/sveltejs/svelte/issues/4442
			$$invalidate(0, fill = fill || null);
		}

		if ($$self.$$.dirty & /*glyph*/ 2) {
			$$invalidate(1, glyph = glyph || Loader$1);
		}

		if ($$self.$$.dirty & /*message*/ 4) {
			$$invalidate(2, message = message || null);
		}

		if ($$self.$$.dirty & /*size*/ 8) {
			$$invalidate(3, size = size || 50);
		}

		if ($$self.$$.dirty & /*stroke*/ 16) {
			$$invalidate(4, stroke = stroke || null);
		}

		if ($$self.$$.dirty & /*strokeWidth*/ 32) {
			$$invalidate(5, strokeWidth = strokeWidth || 0.75);
		}
	};

	return [fill, glyph, message, size, stroke, strokeWidth];
}

class LoadingView extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance, create_fragment, safe_not_equal, {
			fill: 0,
			glyph: 1,
			message: 2,
			size: 3,
			stroke: 4,
			strokeWidth: 5
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "LoadingView",
			options,
			id: create_fragment.name
		});
	}

	get fill() {
		throw new Error("<LoadingView>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set fill(value) {
		throw new Error("<LoadingView>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get glyph() {
		throw new Error("<LoadingView>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set glyph(value) {
		throw new Error("<LoadingView>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get message() {
		throw new Error("<LoadingView>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set message(value) {
		throw new Error("<LoadingView>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get size() {
		throw new Error("<LoadingView>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set size(value) {
		throw new Error("<LoadingView>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get stroke() {
		throw new Error("<LoadingView>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set stroke(value) {
		throw new Error("<LoadingView>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get strokeWidth() {
		throw new Error("<LoadingView>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set strokeWidth(value) {
		throw new Error("<LoadingView>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

var LoadingView$1 = LoadingView;

export { LoadingView$1 as L, Loader$1 as a };
